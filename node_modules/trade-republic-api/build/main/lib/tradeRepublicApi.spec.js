"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const ava_1 = __importDefault(require("ava"));
const get_port_1 = __importDefault(require("get-port"));
const ws_1 = require("ws");
const tradeRepublicApi_1 = require("./tradeRepublicApi");
const test = ava_1.default;
function setUpServer(port) {
    return new Promise((resolve, reject) => {
        try {
            const wss = new ws_1.Server({
                port,
            }, () => {
                resolve(wss);
            });
        }
        catch (e) {
            reject(e);
        }
    });
}
test.beforeEach(async (t) => {
    const port = await get_port_1.default();
    t.context.wss = await setUpServer(port);
    t.context.endpoint = `ws://localhost:${port}`;
});
test.afterEach.always((t) => {
    t.context.wss.close();
});
function waitForServerMessage(wss) {
    return new Promise((resolve) => {
        wss.on('connection', (ws) => {
            ws.on('message', (message) => {
                // console.log(`Message received: ${message}`);
                resolve(message.toString());
            });
        });
    });
}
function waitForClientEvent(tr, eventName) {
    return new Promise((resolve) => {
        tr.on(eventName, (event) => {
            // console.log(`Event fired: ${eventName}`);
            resolve(event);
        });
    });
}
test('static - message history is initially empty', (t) => {
    const trapi = new tradeRepublicApi_1.TradeRepublicApi();
    const response = trapi.getSentMessages();
    t.is(response.size, 0);
});
test('websocket connect - correct initialization message', async (t) => {
    const TR_INIT_REGEX = RegExp(`connect 21 \\{"locale":".*"\\}`);
    // delay connect until server is ready
    const trapi = new tradeRepublicApi_1.TradeRepublicApi({
        apiEndpoint: t.context.endpoint,
    });
    trapi.connect();
    const receivedClientMessage = await waitForServerMessage(t.context.wss);
    t.regex(receivedClientMessage, TR_INIT_REGEX);
});
test('websocket connect - trigger connect event', async (t) => {
    t.context.wss.on('connection', (ws) => {
        ws.on('message', () => {
            ws.send('connected');
            ws.close();
        });
    });
    const trapi = new tradeRepublicApi_1.TradeRepublicApi({
        apiEndpoint: t.context.endpoint,
    });
    trapi.connect();
    await waitForClientEvent(trapi, 'connected');
    t.pass();
});
test('websocket oneShot - message is formatted correctly', async (t) => {
    const msg = `1 test ${JSON.stringify({
        test: 'test',
    })}`;
    const msgClient = `sub 1 ${JSON.stringify({
        type: 'test',
        token: '',
        test: 'test',
    })}`;
    t.context.wss.on('connection', (ws) => {
        ws.on('message', (message) => {
            if (message.toString().indexOf('connect 21') > -1) {
                ws.send('connected');
            }
            else if (message == msgClient) {
                ws.send(msg);
                ws.close();
            }
        });
    });
    const trapi = new tradeRepublicApi_1.TradeRepublicApi({
        apiEndpoint: t.context.endpoint,
    });
    trapi.connect();
    await waitForClientEvent(trapi, 'connected');
    const data = await trapi.oneShot('test', { test: 'test' });
    t.is(data.subId, 1);
    t.is(data.type, 'test');
    t.is(data.payload.test, 'test');
});
test('subTicker', async (t) => {
    const msg = `1 ticker ${JSON.stringify({
        bid: {
            price: 100,
        },
        ask: 'tps',
        last: 'tps',
        pre: 'tps',
        open: 'tps',
        qualityId: 'string',
        leverage: 'string',
        delta: 'string',
    })}`;
    const msgClient = `sub 1 ${JSON.stringify({
        type: 'ticker',
        token: '',
        id: 'US1234567890.LSX',
    })}`;
    t.context.wss.on('connection', (ws) => {
        ws.on('message', (message) => {
            if (message.toString().indexOf('connect 21') > -1) {
                ws.send('connected');
            }
            else if (message == msgClient) {
                ws.send(msg);
                ws.close();
            }
        });
    });
    const trapi = new tradeRepublicApi_1.TradeRepublicApi({
        apiEndpoint: t.context.endpoint,
    });
    trapi.connect();
    await waitForClientEvent(trapi, 'connected');
    const subId = trapi.subTicker('US1234567890');
    const ticker = await waitForClientEvent(trapi, 'ticker');
    t.is(ticker.subId, subId);
    t.is(ticker.type, 'ticker');
    t.is(ticker.payload.bid.price, 100);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhZGVSZXB1YmxpY0FwaS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi90cmFkZVJlcHVibGljQXBpLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4Q0FBNkM7QUFDN0Msd0RBQStCO0FBQy9CLDJCQUE0QjtBQUU1Qix5REFBc0Q7QUFPdEQsTUFBTSxJQUFJLEdBQUcsYUFBdUMsQ0FBQztBQUVyRCxTQUFTLFdBQVcsQ0FBQyxJQUFZO0lBQy9CLE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7UUFDckMsSUFBSTtZQUNGLE1BQU0sR0FBRyxHQUFHLElBQUksV0FBTSxDQUNwQjtnQkFDRSxJQUFJO2FBQ0wsRUFDRCxHQUFHLEVBQUU7Z0JBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2YsQ0FBQyxDQUNGLENBQUM7U0FDSDtRQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ1YsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ1g7SUFDSCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUM7QUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsRUFBRTtJQUMxQixNQUFNLElBQUksR0FBRyxNQUFNLGtCQUFPLEVBQUUsQ0FBQztJQUM3QixDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsR0FBRyxNQUFNLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUN4QyxDQUFDLENBQUMsT0FBTyxDQUFDLFFBQVEsR0FBRyxrQkFBa0IsSUFBSSxFQUFFLENBQUM7QUFDaEQsQ0FBQyxDQUFDLENBQUM7QUFFSCxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFO0lBQzFCLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQ3hCLENBQUMsQ0FBQyxDQUFDO0FBRUgs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