"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TradeRepublicApi = void 0;
const events_1 = __importDefault(require("events"));
const ws_1 = __importDefault(require("ws"));
class TradeRepublicApi extends events_1.default {
    constructor(options) {
        super();
        this.subCounter = 1;
        this.locale = '';
        this.sessionToken = '';
        this.sentMessages = new Map();
        this.keepSentMessageHistory = false;
        this.autoReconnect = false;
        this.apiEndpoint = '';
        this.locale = (options === null || options === void 0 ? void 0 : options.locale) || TradeRepublicApi.DEFAULT_LOCALE;
        this.keepSentMessageHistory = (options === null || options === void 0 ? void 0 : options.keepSentMessageHistory) || false;
        this.autoReconnect = (options === null || options === void 0 ? void 0 : options.autoReconnect) || false;
        this.apiEndpoint =
            (options === null || options === void 0 ? void 0 : options.apiEndpoint) || TradeRepublicApi.DEFAULT_APIENDPOINT;
    }
    /**
     * establish a connection to the Trade Republic websocket
     */
    connect() {
        this.ws = new ws_1.default(this.apiEndpoint);
        this.ws.on('open', () => {
            this.send(`connect 21 ${JSON.stringify({ locale: this.locale })}`);
        });
        this.ws.on('message', (data) => {
            this.handleMessage(data);
        });
        this.ws.on('close', () => {
            this.emit('close');
            if (this.autoReconnect) {
                this.subCounter = 0;
                this.connect();
                // TODO: re-subscribe active subscriptions?
            }
        });
    }
    /**
     * supply increasing subscription Ids
     * @returns next subscription Id to be used
     */
    getNextSubId() {
        const current = this.subCounter;
        this.subCounter++;
        return current;
    }
    /**
     * subscribe to the ticker topic of isin
     * @param isin isin
     * @param exchangeId exchangeId, only LSX is supported for now
     * @returns subscriptionId
     */
    subTicker(isin, exchangeId = 'LSX') {
        return this.sub('ticker', { id: `${isin}.${exchangeId}` });
    }
    /**
     * subscribe to a topic by type and specify payload
     * @param type message type
     * @param payload message payload
     * @returns subscriptionId
     */
    sub(type, payload) {
        const subId = this.getNextSubId();
        const msg = `sub ${subId} ${JSON.stringify(Object.assign({ type, token: this.sessionToken }, payload))}`;
        this.sentMessages.set(subId, { type, payload });
        this.send(msg);
        return subId;
    }
    /**
     * subscribe to a topic and wait for a single response
     * @param type message type
     * @param payload message payload
     * @returns response data
     */
    async oneShot(type, payload) {
        const subId = this.sub(type, payload);
        return new Promise((resolve) => {
            const func = (data) => {
                resolve(data);
                this.removeListener(`sub#${subId}`, func);
                this.send(`unsub ${subId}`);
            };
            this.on(`sub#${subId}`, func);
        });
    }
    /**
     * emit an event only when they are listened for
     * @param eventName name of the event
     * @param data payload of the event
     */
    emitIfSubbed(eventName, data) {
        if (this.eventNames().indexOf(eventName) > -1) {
            this.emit(eventName, data);
        }
    }
    /**
     * get all messages that have been sent to the websocket
     * empty if `keepSentMessageHistory` is not enabled
     * @returns map linking subscription Ids to request payloads
     */
    getSentMessages() {
        return this.sentMessages;
    }
    /**
     * process an incoming message
     * @param data raw received websocket message
     */
    handleMessage(data) {
        this.emitIfSubbed('data', data);
        if (data == TradeRepublicApi.CONNECTED_CONFIRMED_MSG) {
            this.emit('connected');
        }
        else {
            try {
                const parsed = this.processNewMessage(data.toString());
                const { subId } = parsed;
                const request = this.sentMessages.get(subId);
                if (!this.keepSentMessageHistory) {
                    this.sentMessages.delete(subId);
                }
                this.emitIfSubbed(`sub#${subId}`, Object.assign({ request }, parsed));
                // TODO: better ticker filter
                if (data.toString().indexOf('bid":') > -1) {
                    this.emitIfSubbed('ticker', Object.assign({ request }, parsed));
                }
                else if (data.toString().indexOf('expectedClosingTime') > -1) {
                    this.emitIfSubbed('historical', Object.assign({ request }, parsed));
                }
            }
            catch (error) {
                this.emit(`error`, { error, data });
            }
        }
    }
    /**
     * sends a message to the Websocket
     * @param msg message string
     */
    send(msg) {
        this.ws.send(msg);
        this.emitIfSubbed('sent', msg);
    }
    /**
     * extracts structured data from an incoming message
     * @param data raw received data
     * @returns Message obj containing subId, type and payload
     */
    processNewMessage(data) {
        const parts = data.split(' ');
        const subId = parseInt(parts[0]);
        const type = parts[1];
        const json = parts[2];
        const payload = JSON.parse(json);
        return {
            subId,
            type,
            payload,
        };
    }
}
exports.TradeRepublicApi = TradeRepublicApi;
TradeRepublicApi.DEFAULT_LOCALE = 'de';
TradeRepublicApi.DEFAULT_APIENDPOINT = 'wss://api.traderepublic.com';
TradeRepublicApi.CONNECTED_CONFIRMED_MSG = 'connected';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhZGVSZXB1YmxpY0FwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvdHJhZGVSZXB1YmxpY0FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxvREFBa0M7QUFFbEMsNENBQTJCO0FBaUQzQixNQUFhLGdCQUFpQixTQUFRLGdCQUFZO0lBZWhELFlBQVksT0FBMEI7UUFDcEMsS0FBSyxFQUFFLENBQUM7UUFkRixlQUFVLEdBQUcsQ0FBQyxDQUFDO1FBRWYsV0FBTSxHQUFHLEVBQUUsQ0FBQztRQUNaLGlCQUFZLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLGlCQUFZLEdBQUcsSUFBSSxHQUFHLEVBQW1CLENBQUM7UUFDMUMsMkJBQXNCLEdBQUcsS0FBSyxDQUFDO1FBQy9CLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLGdCQUFXLEdBQUcsRUFBRSxDQUFDO1FBUXZCLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQSxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsTUFBTSxLQUFJLGdCQUFnQixDQUFDLGNBQWMsQ0FBQztRQUNqRSxJQUFJLENBQUMsc0JBQXNCLEdBQUcsQ0FBQSxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsc0JBQXNCLEtBQUksS0FBSyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQSxPQUFPLGFBQVAsT0FBTyx1QkFBUCxPQUFPLENBQUUsYUFBYSxLQUFJLEtBQUssQ0FBQztRQUNyRCxJQUFJLENBQUMsV0FBVztZQUNkLENBQUEsT0FBTyxhQUFQLE9BQU8sdUJBQVAsT0FBTyxDQUFFLFdBQVcsS0FBSSxnQkFBZ0IsQ0FBQyxtQkFBbUIsQ0FBQztJQUNqRSxDQUFDO0lBRUQ7O09BRUc7SUFDSSxPQUFPO1FBQ1osSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLFlBQVMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDMUMsSUFBSSxDQUFDLEVB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