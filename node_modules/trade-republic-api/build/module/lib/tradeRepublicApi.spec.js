import anyTest from 'ava';
import getPort from 'get-port';
import { Server } from 'ws';
import { TradeRepublicApi } from './tradeRepublicApi';
const test = anyTest;
function setUpServer(port) {
    return new Promise((resolve, reject) => {
        try {
            const wss = new Server({
                port,
            }, () => {
                resolve(wss);
            });
        }
        catch (e) {
            reject(e);
        }
    });
}
test.beforeEach(async (t) => {
    const port = await getPort();
    t.context.wss = await setUpServer(port);
    t.context.endpoint = `ws://localhost:${port}`;
});
test.afterEach.always((t) => {
    t.context.wss.close();
});
function waitForServerMessage(wss) {
    return new Promise((resolve) => {
        wss.on('connection', (ws) => {
            ws.on('message', (message) => {
                // console.log(`Message received: ${message}`);
                resolve(message.toString());
            });
        });
    });
}
function waitForClientEvent(tr, eventName) {
    return new Promise((resolve) => {
        tr.on(eventName, (event) => {
            // console.log(`Event fired: ${eventName}`);
            resolve(event);
        });
    });
}
test('static - message history is initially empty', (t) => {
    const trapi = new TradeRepublicApi();
    const response = trapi.getSentMessages();
    t.is(response.size, 0);
});
test('websocket connect - correct initialization message', async (t) => {
    const TR_INIT_REGEX = RegExp(`connect 21 \\{"locale":".*"\\}`);
    // delay connect until server is ready
    const trapi = new TradeRepublicApi({
        apiEndpoint: t.context.endpoint,
    });
    trapi.connect();
    const receivedClientMessage = await waitForServerMessage(t.context.wss);
    t.regex(receivedClientMessage, TR_INIT_REGEX);
});
test('websocket connect - trigger connect event', async (t) => {
    t.context.wss.on('connection', (ws) => {
        ws.on('message', () => {
            ws.send('connected');
            ws.close();
        });
    });
    const trapi = new TradeRepublicApi({
        apiEndpoint: t.context.endpoint,
    });
    trapi.connect();
    await waitForClientEvent(trapi, 'connected');
    t.pass();
});
test('websocket oneShot - message is formatted correctly', async (t) => {
    const msg = `1 test ${JSON.stringify({
        test: 'test',
    })}`;
    const msgClient = `sub 1 ${JSON.stringify({
        type: 'test',
        token: '',
        test: 'test',
    })}`;
    t.context.wss.on('connection', (ws) => {
        ws.on('message', (message) => {
            if (message.toString().indexOf('connect 21') > -1) {
                ws.send('connected');
            }
            else if (message == msgClient) {
                ws.send(msg);
                ws.close();
            }
        });
    });
    const trapi = new TradeRepublicApi({
        apiEndpoint: t.context.endpoint,
    });
    trapi.connect();
    await waitForClientEvent(trapi, 'connected');
    const data = await trapi.oneShot('test', { test: 'test' });
    t.is(data.subId, 1);
    t.is(data.type, 'test');
    t.is(data.payload.test, 'test');
});
test('subTicker', async (t) => {
    const msg = `1 ticker ${JSON.stringify({
        bid: {
            price: 100,
        },
        ask: 'tps',
        last: 'tps',
        pre: 'tps',
        open: 'tps',
        qualityId: 'string',
        leverage: 'string',
        delta: 'string',
    })}`;
    const msgClient = `sub 1 ${JSON.stringify({
        type: 'ticker',
        token: '',
        id: 'US1234567890.LSX',
    })}`;
    t.context.wss.on('connection', (ws) => {
        ws.on('message', (message) => {
            if (message.toString().indexOf('connect 21') > -1) {
                ws.send('connected');
            }
            else if (message == msgClient) {
                ws.send(msg);
                ws.close();
            }
        });
    });
    const trapi = new TradeRepublicApi({
        apiEndpoint: t.context.endpoint,
    });
    trapi.connect();
    await waitForClientEvent(trapi, 'connected');
    const subId = trapi.subTicker('US1234567890');
    const ticker = await waitForClientEvent(trapi, 'ticker');
    t.is(ticker.subId, subId);
    t.is(ticker.type, 'ticker');
    t.is(ticker.payload.bid.price, 100);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhZGVSZXB1YmxpY0FwaS5zcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi90cmFkZVJlcHVibGljQXBpLnNwZWMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxPQUEwQixNQUFNLEtBQUssQ0FBQztBQUM3QyxPQUFPLE9BQU8sTUFBTSxVQUFVLENBQUM7QUFDL0IsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLElBQUksQ0FBQztBQUU1QixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQU90RCxNQUFNLElBQUksR0FBRyxPQUF1QyxDQUFDO0FBRXJELFNBQVMsV0FBVyxDQUFDLElBQVk7SUFDL0IsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUNyQyxJQUFJO1lBQ0YsTUFBTSxHQUFHLEdBQUcsSUFBSSxNQUFNLENBQ3BCO2dCQUNFLElBQUk7YUFDTCxFQUNELEdBQUcsRUFBRTtnQkFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDZixDQUFDLENBQ0YsQ0FBQztTQUNIO1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDWDtJQUNILENBQUMsQ0FBQyxDQUFDO0FBQ0wsQ0FBQztBQUVELElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxFQUFFO0lBQzFCLE1BQU0sSUFBSSxHQUFHLE1BQU0sT0FBTyxFQUFFLENBQUM7SUFDN0IsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsTUFBTSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDeEMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxRQUFRLEdBQUcsa0JBQWtCLElBQUksRUFBRSxDQUFDO0FBQ2hELENBQUMsQ0FBQyxDQUFDO0FBRUgsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxD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