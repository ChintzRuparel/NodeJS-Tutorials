import EventEmitter from 'events';
import WebSocket from 'ws';
export class TradeRepublicApi extends EventEmitter {
    constructor(options) {
        super();
        this.subCounter = 1;
        this.locale = '';
        this.sessionToken = '';
        this.sentMessages = new Map();
        this.keepSentMessageHistory = false;
        this.autoReconnect = false;
        this.apiEndpoint = '';
        this.locale = options?.locale || TradeRepublicApi.DEFAULT_LOCALE;
        this.keepSentMessageHistory = options?.keepSentMessageHistory || false;
        this.autoReconnect = options?.autoReconnect || false;
        this.apiEndpoint =
            options?.apiEndpoint || TradeRepublicApi.DEFAULT_APIENDPOINT;
    }
    /**
     * establish a connection to the Trade Republic websocket
     */
    connect() {
        this.ws = new WebSocket(this.apiEndpoint);
        this.ws.on('open', () => {
            this.send(`connect 21 ${JSON.stringify({ locale: this.locale })}`);
        });
        this.ws.on('message', (data) => {
            this.handleMessage(data);
        });
        this.ws.on('close', () => {
            this.emit('close');
            if (this.autoReconnect) {
                this.subCounter = 0;
                this.connect();
                // TODO: re-subscribe active subscriptions?
            }
        });
    }
    /**
     * supply increasing subscription Ids
     * @returns next subscription Id to be used
     */
    getNextSubId() {
        const current = this.subCounter;
        this.subCounter++;
        return current;
    }
    /**
     * subscribe to the ticker topic of isin
     * @param isin isin
     * @param exchangeId exchangeId, only LSX is supported for now
     * @returns subscriptionId
     */
    subTicker(isin, exchangeId = 'LSX') {
        return this.sub('ticker', { id: `${isin}.${exchangeId}` });
    }
    /**
     * subscribe to a topic by type and specify payload
     * @param type message type
     * @param payload message payload
     * @returns subscriptionId
     */
    sub(type, payload) {
        const subId = this.getNextSubId();
        const msg = `sub ${subId} ${JSON.stringify({
            type,
            token: this.sessionToken,
            ...payload,
        })}`;
        this.sentMessages.set(subId, { type, payload });
        this.send(msg);
        return subId;
    }
    /**
     * subscribe to a topic and wait for a single response
     * @param type message type
     * @param payload message payload
     * @returns response data
     */
    async oneShot(type, payload) {
        const subId = this.sub(type, payload);
        return new Promise((resolve) => {
            const func = (data) => {
                resolve(data);
                this.removeListener(`sub#${subId}`, func);
                this.send(`unsub ${subId}`);
            };
            this.on(`sub#${subId}`, func);
        });
    }
    /**
     * emit an event only when they are listened for
     * @param eventName name of the event
     * @param data payload of the event
     */
    emitIfSubbed(eventName, data) {
        if (this.eventNames().indexOf(eventName) > -1) {
            this.emit(eventName, data);
        }
    }
    /**
     * get all messages that have been sent to the websocket
     * empty if `keepSentMessageHistory` is not enabled
     * @returns map linking subscription Ids to request payloads
     */
    getSentMessages() {
        return this.sentMessages;
    }
    /**
     * process an incoming message
     * @param data raw received websocket message
     */
    handleMessage(data) {
        this.emitIfSubbed('data', data);
        if (data == TradeRepublicApi.CONNECTED_CONFIRMED_MSG) {
            this.emit('connected');
        }
        else {
            try {
                const parsed = this.processNewMessage(data.toString());
                const { subId } = parsed;
                const request = this.sentMessages.get(subId);
                if (!this.keepSentMessageHistory) {
                    this.sentMessages.delete(subId);
                }
                this.emitIfSubbed(`sub#${subId}`, { request, ...parsed });
                // TODO: better ticker filter
                if (data.toString().indexOf('bid":') > -1) {
                    this.emitIfSubbed('ticker', { request, ...parsed });
                }
                else if (data.toString().indexOf('expectedClosingTime') > -1) {
                    this.emitIfSubbed('historical', { request, ...parsed });
                }
            }
            catch (error) {
                this.emit(`error`, { error, data });
            }
        }
    }
    /**
     * sends a message to the Websocket
     * @param msg message string
     */
    send(msg) {
        this.ws.send(msg);
        this.emitIfSubbed('sent', msg);
    }
    /**
     * extracts structured data from an incoming message
     * @param data raw received data
     * @returns Message obj containing subId, type and payload
     */
    processNewMessage(data) {
        const parts = data.split(' ');
        const subId = parseInt(parts[0]);
        const type = parts[1];
        const json = parts[2];
        const payload = JSON.parse(json);
        return {
            subId,
            type,
            payload,
        };
    }
}
TradeRepublicApi.DEFAULT_LOCALE = 'de';
TradeRepublicApi.DEFAULT_APIENDPOINT = 'wss://api.traderepublic.com';
TradeRepublicApi.CONNECTED_CONFIRMED_MSG = 'connected';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhZGVSZXB1YmxpY0FwaS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9saWIvdHJhZGVSZXB1YmxpY0FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLFlBQVksTUFBTSxRQUFRLENBQUM7QUFFbEMsT0FBTyxTQUFTLE1BQU0sSUFBSSxDQUFDO0FBaUQzQixNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsWUFBWTtJQWVoRCxZQUFZLE9BQTBCO1FBQ3BDLEtBQUssRUFBRSxDQUFDO1FBZEYsZUFBVSxHQUFHLENBQUMsQ0FBQztRQUVmLFdBQU0sR0FBRyxFQUFFLENBQUM7UUFDWixpQkFBWSxHQUFHLEVBQUUsQ0FBQztRQUNsQixpQkFBWSxHQUFHLElBQUksR0FBRyxFQUFtQixDQUFDO1FBQzFDLDJCQUFzQixHQUFHLEtBQUssQ0FBQztRQUMvQixrQkFBYSxHQUFHLEtBQUssQ0FBQztRQUN0QixnQkFBVyxHQUFHLEVBQUUsQ0FBQztRQVF2QixJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sRUFBRSxNQUFNLElBQUksZ0JBQWdCLENBQUMsY0FBYyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxzQkFBc0IsR0FBRyxPQUFPLEVBQUUsc0JBQXNCLElBQUksS0FBSyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxFQUFFLGFBQWEsSUFBSSxLQUFLLENBQUM7UUFDckQsSUFBSSxDQUFDLFdBQVc7WUFDZCxPQUFPLEVBQUUsV0FBVyxJQUFJLGdCQUFnQixDQUFDLG1CQUFtQixDQUFDO0lBQ2pFLENBQUM7SUFFRDs7T0FFRztJQUNJLE9BQU87UUFDWixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxJ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